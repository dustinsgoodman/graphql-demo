"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

"""Defines Character type for API"""
type Character {
  """Created at date time in ISO format"""
  createdAt: DateTime!

  """Gender identity if known"""
  gender: Gender

  """Unique identifier"""
  id: ID!

  """URL for image asset"""
  image: URL!

  """Human readable name"""
  name: String!

  """Species identification"""
  species: String!

  """Alive or Dead status if known"""
  status: CharacterStatus

  """Description of the character"""
  type: String!

  """Updated at date time in ISO format"""
  updatedAt: DateTime!
}

"""Character repsonse object for pagination"""
type CharacterConnection {
  """List of characters"""
  nodes: [Character]

  """Pagination information"""
  pageInfo: PageInfo
}

"""What is the state of this character?"""
enum CharacterStatus {
  """Alive"""
  ALIVE

  """Dead"""
  DEAD
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""How does this character identify?"""
enum Gender {
  """Female"""
  FEMALE

  """Non-binary or unknown"""
  GENDERLESS

  """Male"""
  MALE
}

"""Collections of mutations for schema"""
type Mutation {
  """Empty mutation type to serve as a parent for all other mutations"""
  _: String
}

"""PageInfo object for describing the pagination info on response"""
type PageInfo {
  """What page was returned"""
  page: Int

  """Number of items returned for the page"""
  perPage: Int

  """Total number of items"""
  total: Int

  """Total number of pages"""
  totalPages: Int
}

"""Pagination input object for selecting a page"""
input PaginationInput {
  """Page to return"""
  page: Int

  """Items to return per page"""
  perPage: Int

  """Sorting direction to return objects"""
  sortDirection: SortDirection
}

"""Collections of queries for schema"""
type Query {
  """Empty query type to serve as a parent for all other queries"""
  _: String

  """Returns a character given its ID"""
  character(id: ID!): Character

  """Returns a list of all the characters"""
  characters(pagination: PaginationInput): CharacterConnection
}

"""Enum of sorting directions"""
enum SortDirection {
  """Ascending"""
  ASC

  """Descending"""
  DESC
}

"""Collections of subscriptions for schema"""
type Subscription {
  """
  Empty subscription type to serve as a parent for all other subscriptions
  """
  _: String
}

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL
